// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  wallet    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}

model LaunchPool {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  launchId         Int      @unique // Contract launch ID
  contractAddress  String   @unique // NFT Collection contract address
  launchpadAddress String   // Launchpad contract address
  name             String   // Collection name
  symbol           String   // Collection symbol
  description      String?  // Collection description
  imageUrl         String?  // Collection image URL
  maxSupply        Int      // Maximum supply
  currentSupply    Int      @default(0) // Current minted supply
  holderCount      Int      @default(0) // Number of unique holders
  creator          String   // Creator wallet address
  status           String   @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  startTime        DateTime? // When launch was started
  endTime          DateTime? // When launch was completed/cancelled
  totalRaised      String   @default("0") // Total ETH raised
  currentPhase     String   @default("NONE") // Current phase
  autoProgress     Boolean  @default(false) // Auto progress phases
  blockNumber      String?  // Block number when created
  transactionHash  String?  // Transaction hash when created
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("launchpools")
}

model NFTMetadata {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  launchId         Int      // Associated launch ID
  collectionAddress String  // NFT Collection contract address
  tokenId          Int      // Token ID for this NFT
  name             String   // NFT name
  description      String?  // NFT description
  image            String?  // Image URL (IPFS)
  attributes       Json?    // NFT attributes as JSON
  metadataUri      String   // IPFS metadata URI
  ipfsHash         String?  // IPFS hash for metadata
  isMinted         Boolean  @default(false) // Whether this NFT has been minted
  mintedTo         String?  // Wallet address that minted this NFT
  mintedAt         DateTime? // When this NFT was minted
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([launchId, tokenId]) // Ensure unique tokenId per launch
  @@map("nft_metadata")
}

model NFT {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenId           String   // Token ID as string
  collectionAddress String   // NFT Collection contract address
  owner             String   // Current owner wallet address
  name              String   // NFT name
  description       String?  // NFT description
  image             String?  // Image URL (IPFS)
  metadata          Json?    // Full metadata as JSON
  tokenURI          String?  // Token URI from contract
  lastTransferBlock String?  // Block number of last transfer
  lastTransferHash  String?  // Transaction hash of last transfer
  isListed          Boolean  @default(false) // Whether listed on marketplace
  listingPrice      String?  // Listing price if listed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([tokenId, collectionAddress]) // Ensure unique tokenId per collection
  @@map("nfts")
}

model CollectionCache {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String   @unique // Collection contract address (lowercase)
  name        String   // Collection name
  symbol      String   // Collection symbol
  totalSupply Int      @default(0) // Total supply from contract
  image       String?  // Preview image URL from first NFT
  description String?  // Collection description if available
  verified    Boolean  @default(false) // Whether collection is verified
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collection_cache")
}
